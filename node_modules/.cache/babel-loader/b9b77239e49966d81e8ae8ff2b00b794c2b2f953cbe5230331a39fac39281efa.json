{"ast":null,"code":"var _jsxFileName = \"D:\\\\IMDB\\\\movie\\\\src\\\\components\\\\searchBar\\\\SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport \"./SearchBar.css\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchBar(_ref) {\n  _s();\n  let {\n    history\n  } = _ref;\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const fetchdata = event => {\n    const inputValue = event.target.value;\n    setQuery(inputValue); // Moved this up to update the query immediately\n\n    if (inputValue.trim() === '') {\n      setResults([]); // Clear results when input is empty\n      return;\n    }\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=4e44d9029b1270a757cddc766a1bcb63&language=en-US&query=${inputValue}`).then(res => res.json()).then(data => {\n      if (!data.errors) {\n        setResults(data.results);\n      } else {\n        setResults([]);\n      }\n      ;\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n      setResults([]); // Handle fetch errors by clearing results\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"taskbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        value: query,\n        onChange: fetchdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: /*#__PURE__*/_jsxDEV(FaSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchcontainer\",\n      children: results.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"ul\",\n        children: results.map(movie => /*#__PURE__*/_jsxDEV(Link, {\n          to: `/movie/${movie.id}`,\n          style: {\n            textDecoration: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchBar, \"kZM7FOZerLi1RvZykWYa8gktm94=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","FaSearch","Link","jsxDEV","_jsxDEV","SearchBar","_ref","_s","history","query","setQuery","results","setResults","fetchdata","event","inputValue","target","value","trim","fetch","then","res","json","data","errors","catch","error","console","className","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","map","movie","to","id","style","textDecoration","title","_c","$RefreshReg$"],"sources":["D:/IMDB/movie/src/components/searchBar/SearchBar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport \"./SearchBar.css\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nfunction SearchBar({history}) {\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState([])\r\n\r\n  const fetchdata = (event) => {\r\n    const inputValue = event.target.value;\r\n    setQuery(inputValue); // Moved this up to update the query immediately\r\n\r\n    if (inputValue.trim() === '') {\r\n      setResults([]); // Clear results when input is empty\r\n      return;\r\n    }\r\n\r\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=4e44d9029b1270a757cddc766a1bcb63&language=en-US&query=${inputValue}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (!data.errors) {\r\n          setResults(data.results);\r\n        } else {\r\n          setResults([]);\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data:\", error);\r\n        setResults([]); // Handle fetch errors by clearing results\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"taskbar\">\r\n      <div className=\"search-box\">\r\n        <input type=\"text\" placeholder=\"Search...\" value={query} onChange={fetchdata} />\r\n        <button type=\"button\"><FaSearch /></button>\r\n      </div>\r\n      <div className='searchcontainer'>\r\n        {results.length > 0 && (\r\n          <ul className='ul'>\r\n            {results.map((movie) => (\r\n              <Link key={movie.id} to={`/movie/${movie.id}`} style={{ textDecoration: \"none\" }}>\r\n                <li>{movie.title}</li>\r\n              </Link>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}